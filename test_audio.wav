import pyttsx3  # Make sure pyttsx3 is installed: pip install pyttsx3
import speech_recognition as sr  # Make sure SpeechRecognition is installed: pip install SpeechRecognition
import datetime
import time
import webbrowser


def initialize_engine():
    # Use 'nsss' driver for macOS
    engine = pyttsx3.init("nsss")
    voices = engine.getProperty('voices')

    # Optionally, print available voices if needed for testing purposes
    # for i, voice in enumerate(voices):
    #     print(f"Voice {i}: {voice.name}")
    
    rate = engine.getProperty('rate')
    engine.setProperty('rate', rate - 50)  # Adjust speaking rate
    
    volume = engine.getProperty('volume')
    engine.setProperty('volume', min(volume + 0.25, 1.0))  # Ensure volume doesn't exceed 1.0
    
    return engine


def speak(text):
    engine = initialize_engine()
    engine.say(text)
    engine.runAndWait()


def command():
    r = sr.Recognizer()

    # Set the microphone to use based on the available ones (e.g., 0: MacBook Air Microphone)
    mic_index = 0  # Adjust this index based on your available microphone
    with sr.Microphone(device_index=mic_index) as source:
        print("Adjusting for ambient noise... Please wait.")
        r.adjust_for_ambient_noise(source, duration=0.5)  # Adjusting for ambient noise
        print("Listening... Speak now!")

        # Set other parameters
        r.pause_threshold = 1.0
        r.phrase_threshold = 0.3
        r.sample_rate = 48000
        r.dynamic_energy_threshold = True
        r.operation_timeout = 5
        r.non_speaking_duration = 0.5
        r.dynamic_energy_adjustment = 2
        r.energy_threshold = 4000
        r.phrase_time_limit = 10

        audio = r.listen(source)

    try:
        print("\r", end="", flush=True)
        print("Recognizing...", end="", flush=True)
        query = r.recognize_google(audio, language='en-in')  # Recognize speech using Google's API
        print("\r", end="", flush=True)
        print(f"User said: {query}\n")
    except Exception as e:
        print("Say that again please")
        return "None"

    return query


def cal_day():
    day = datetime.datetime.today().weekday() + 1
    day_dict = {
        1: "Monday",
        2: "Tuesday",
        3: "Wednesday",
        4: "Thursday",
        5: "Friday",
        6: "Saturday",
        7: "Sunday"
    }
    return day_dict.get(day, "Unknown")


def wishMe():
    hour = int(datetime.datetime.now().hour)
    t = time.strftime("%I:%M:%p")
    day = cal_day()

    if hour >= 0 and hour <= 12 and 'AM' in t:
        speak(f"Good morning Atharva, it's {day} and the time is {t}")
    elif hour >= 12 and hour <= 16 and 'PM' in t:
        speak(f"Good afternoon Atharva, it's {day} and the time is {t}")
    else:
        speak(f"Good evening Atharva, it's {day} and the time is {t}")

def social_media(command):
    if 'facebook' in command:
        speak("opening your facebook")
        webbrowser.open("https://www.facebook.com/")

# Test the functions
if __name__ == "__main__":
    wishMe()
    # engine_talk("Allow me to introduce myself I am Jarvis, the virtual artificial intelligence and I'm here to assist you with a variety of tasks as best I can, 24 hours a day seven days a week.")
    while True:
        query = command().lower()
        # query  = input("Enter your command-> ")
        if ('facebook' in query) or ('discord' in query) or ('whatsapp' in query) or ('instagram' in query):
            social_media(query)








